import { Injectable } from '@angular/core';
import { Observable, from, throwError } from 'rxjs';
import { map, catchError, timeout } from 'rxjs/operators';

export interface LocationCoordinates {
  latitude: number;
  longitude: number;
  accuracy?: number;
  timestamp?: number;
}

export interface GeolocationError {
  code: number;
  message: string;
  userMessage: string;
}

export interface LocationMode {
  enableHighAccuracy: boolean;
  timeout: number;
  maximumAge: number;
}

@Injectable({
  providedIn: 'root'
})
export class GeolocationService {

  // Configuraciones para diferentes modos de uso
  private readonly staticMode: LocationMode = {
    enableHighAccuracy: true,    // GPS real para precisi√≥n
    timeout: 15000,              // 15 segundos para obtener GPS
    maximumAge: 300000           // Cache 5 minutos (modo est√°tico)
  };

  private readonly dynamicMode: LocationMode = {
    enableHighAccuracy: true,    // GPS real para tracking
    timeout: 10000,              // 10 segundos (m√°s r√°pido)
    maximumAge: 5000             // Cache 5 segundos (modo din√°mico)
  };

  // Cache de ubicaciones por modo
  private staticLocation: LocationCoordinates | null = null;
  private staticLocationTime: number = 0;
  private dynamicLocation: LocationCoordinates | null = null;
  private dynamicLocationTime: number = 0;

  // Estado del servicio
  private isInDynamicMode = false;

  constructor() {
    console.log('üåç GeolocationService inicializado');
  }

  /**
   * Obtener ubicaci√≥n est√°tica (para solicitudes de viaje)
   */
  getStaticLocation(): Observable<LocationCoordinates> {
    console.log('üìç Solicitando ubicaci√≥n est√°tica');

    // Verificar cache est√°tico
    if (this.hasValidStaticCache()) {
      console.log('‚ö° Usando ubicaci√≥n est√°tica desde cache');
      return new Observable(observer => {
        observer.next(this.staticLocation!);
        observer.complete();
      });
    }

    // Obtener nueva ubicaci√≥n est√°tica
    return this.getCurrentLocation(this.staticMode).pipe(
      map((coordinates) => {
        // Guardar en cache est√°tico
        this.staticLocation = coordinates;
        this.staticLocationTime = Date.now();
        console.log('üíæ Ubicaci√≥n est√°tica guardada en cache (5 minutos)');
        return coordinates;
      })
    );
  }

  /**
   * Obtener ubicaci√≥n din√°mica (para tracking de viajes activos)
   */
  getDynamicLocation(): Observable<LocationCoordinates> {
    console.log('üéØ Solicitando ubicaci√≥n din√°mica');

    // Verificar cache din√°mico
    if (this.hasValidDynamicCache()) {
      console.log('‚ö° Usando ubicaci√≥n din√°mica desde cache');
      return new Observable(observer => {
        observer.next(this.dynamicLocation!);
        observer.complete();
      });
    }

    // Obtener nueva ubicaci√≥n din√°mica
    return this.getCurrentLocation(this.dynamicMode).pipe(
      map((coordinates) => {
        // Guardar en cache din√°mico
        this.dynamicLocation = coordinates;
        this.dynamicLocationTime = Date.now();
        console.log('üíæ Ubicaci√≥n din√°mica guardada en cache (5 segundos)');
        return coordinates;
      })
    );
  }

  /**
   * Forzar obtenci√≥n de GPS fresco (sin cache)
   */
  getFreshLocation(mode: 'static' | 'dynamic' = 'static'): Observable<LocationCoordinates> {
    console.log(`üîÑ Forzando GPS fresco (modo: ${mode})`);
    
    const locationMode = mode === 'static' ? this.staticMode : this.dynamicMode;
    
    return this.getCurrentLocation(locationMode).pipe(
      map((coordinates) => {
        // Actualizar cache correspondiente
        if (mode === 'static') {
          this.staticLocation = coordinates;
          this.staticLocationTime = Date.now();
        } else {
          this.dynamicLocation = coordinates;
          this.dynamicLocationTime = Date.now();
        }
        console.log(`‚úÖ GPS fresco obtenido y cache ${mode} actualizado`);
        return coordinates;
      })
    );
  }

  /**
   * Activar modo din√°mico para tracking de viaje
   */
  enableDynamicMode(): void {
    console.log('üöÄ Activando modo din√°mico para tracking');
    this.isInDynamicMode = true;
  }

  /**
   * Desactivar modo din√°mico (volver a modo est√°tico)
   */
  disableDynamicMode(): void {
    console.log('üõë Desactivando modo din√°mico');
    this.isInDynamicMode = false;
    // Limpiar cache din√°mico
    this.dynamicLocation = null;
    this.dynamicLocationTime = 0;
  }

  /**
   * Obtener ubicaci√≥n basada en el modo activo
   */
  getCurrentActiveLocation(): Observable<LocationCoordinates> {
    return this.isInDynamicMode ? this.getDynamicLocation() : this.getStaticLocation();
  }

  /**
   * Obtener ubicaci√≥n actual con opciones personalizadas
   */
  getCurrentLocation(options?: PositionOptions): Observable<LocationCoordinates> {
    console.log('üìç Solicitando ubicaci√≥n actual');

    // Verificar disponibilidad de geolocalizaci√≥n
    if (!navigator.geolocation) {
      console.error('‚ùå Geolocalizaci√≥n no soportada');
      return throwError(() => this.createError(
        0, 
        'Geolocation not supported', 
        'Tu navegador no soporta geolocalizaci√≥n'
      ));
    }

    // Usar opciones personalizadas o las est√°ticas por defecto
    const finalOptions = options || this.staticMode;
    console.log('‚öôÔ∏è Opciones GPS:', finalOptions);

    // Crear Observable desde getCurrentPosition
    return from(new Promise<GeolocationPosition>((resolve, reject) => {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          console.log('‚úÖ Ubicaci√≥n obtenida exitosamente');
          resolve(position);
        },
        (error) => {
          console.error('‚ùå Error obteniendo ubicaci√≥n:', error);
          reject(error);
        },
        finalOptions
      );
    })).pipe(
      // Timeout adicional por seguridad
      timeout(finalOptions.timeout! + 2000),
      
      // Mapear a formato est√°ndar
      map((position: GeolocationPosition) => {
        const coordinates: LocationCoordinates = {
          latitude: position.coords.latitude,
          longitude: position.coords.longitude,
          accuracy: position.coords.accuracy,
          timestamp: position.timestamp
        };

        console.log(`üìç Coordenadas: ${coordinates.latitude.toFixed(6)}, ${coordinates.longitude.toFixed(6)}`);
        
        // Validar coordenadas
        if (!this.isValidCoordinates(coordinates)) {
          throw new Error('Coordenadas inv√°lidas recibidas');
        }
        
        return coordinates;
      }),
      
      // Manejo de errores
      catchError((error) => {
        console.error('üí• Error en obtenci√≥n de ubicaci√≥n:', error);
        return throwError(() => this.handleGeolocationError(error));
      })
    );
  }

  /**
   * Limpiar cache de ubicaciones
   */
  clearCache(mode: 'static' | 'dynamic' | 'all' = 'all'): void {
    switch (mode) {
      case 'static':
        console.log('üßπ Limpiando cache est√°tico');
        this.staticLocation = null;
        this.staticLocationTime = 0;
        break;
      case 'dynamic':
        console.log('üßπ Limpiando cache din√°mico');
        this.dynamicLocation = null;
        this.dynamicLocationTime = 0;
        break;
      case 'all':
      default:
        console.log('üßπ Limpiando todos los caches');
        this.staticLocation = null;
        this.staticLocationTime = 0;
        this.dynamicLocation = null;
        this.dynamicLocationTime = 0;
        break;
    }
  }

  /**
   * Obtener √∫ltima ubicaci√≥n conocida
   */
  getLastKnownLocation(): LocationCoordinates | null {
    console.log('üíæ Obteniendo √∫ltima ubicaci√≥n conocida');
    
    // Priorizar ubicaci√≥n m√°s reciente
    const staticAge = this.staticLocationTime;
    const dynamicAge = this.dynamicLocationTime;
    
    if (staticAge > dynamicAge && this.staticLocation) {
      return this.staticLocation;
    } else if (this.dynamicLocation) {
      return this.dynamicLocation;
    } else if (this.staticLocation) {
      return this.staticLocation;
    }
    
    return null;
  }

  /**
   * Validar coordenadas geogr√°ficas
   */
  isValidCoordinates(coords: LocationCoordinates): boolean {
    const { latitude, longitude } = coords;
    
    const isValid = latitude !== null && 
                   longitude !== null &&
                   latitude >= -90 && 
                   latitude <= 90 &&
                   longitude >= -180 && 
                   longitude <= 180 &&
                   !(latitude === 0 && longitude === 0);

    if (!isValid) {
      console.error(`‚ùå Coordenadas inv√°lidas: ${latitude}, ${longitude}`);
    }

    return isValid;
  }

  /**
   * Verificar si las coordenadas est√°n en Ecuador
   */
  isInEcuador(coords: LocationCoordinates): boolean {
    const { latitude, longitude } = coords;
    
    // L√≠mites aproximados de Ecuador
    const isInEcuador = latitude >= -5 && 
                       latitude <= 2 && 
                       longitude >= -92 && 
                       longitude <= -75;

    console.log(`üá™üá® En Ecuador: ${isInEcuador} (${latitude.toFixed(4)}, ${longitude.toFixed(4)})`);
    
    return isInEcuador;
  }

  /**
   * Calcular distancia entre dos puntos usando f√≥rmula Haversine
   */
  calculateDistance(
    coords1: LocationCoordinates, 
    coords2: LocationCoordinates
  ): number {
    const R = 6371; // Radio de la Tierra en km
    
    const dLat = this.degreesToRadians(coords2.latitude - coords1.latitude);
    const dLon = this.degreesToRadians(coords2.longitude - coords1.longitude);
    
    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
              Math.cos(this.degreesToRadians(coords1.latitude)) * 
              Math.cos(this.degreesToRadians(coords2.latitude)) *
              Math.sin(dLon / 2) * Math.sin(dLon / 2);
    
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const distance = R * c;

    console.log(`üìè Distancia calculada: ${distance.toFixed(2)}km`);
    return distance;
  }

  /**
   * Debug del estado completo del servicio
   */
  debugState(): void {
    console.log('\nüåç === GEOLOCATION DEBUG ===');
    console.log('Estado del servicio:');
    console.log(`  Geolocation disponible: ${!!navigator.geolocation}`);
    console.log(`  Modo din√°mico activo: ${this.isInDynamicMode}`);
    console.log(`  Ubicaci√≥n est√°tica:`, this.staticLocation);
    console.log(`  Cache est√°tico v√°lido: ${this.hasValidStaticCache()}`);
    console.log(`  Ubicaci√≥n din√°mica:`, this.dynamicLocation);
    console.log(`  Cache din√°mico v√°lido: ${this.hasValidDynamicCache()}`);
    console.log('üåç === END DEBUG ===\n');
  }

  // ===== M√âTODOS PRIVADOS =====

  /**
   * Verificar si hay cache est√°tico v√°lido
   */
  private hasValidStaticCache(): boolean {
    if (!this.staticLocation) return false;
    
    const age = Date.now() - this.staticLocationTime;
    const isValid = age < this.staticMode.maximumAge!;
    
    console.log(`üìÖ Cache est√°tico: ${Math.round(age/1000)}s, v√°lido: ${isValid}`);
    return isValid;
  }

  /**
   * Verificar si hay cache din√°mico v√°lido
   */
  private hasValidDynamicCache(): boolean {
    if (!this.dynamicLocation) return false;
    
    const age = Date.now() - this.dynamicLocationTime;
    const isValid = age < this.dynamicMode.maximumAge!;
    
    console.log(`üìÖ Cache din√°mico: ${Math.round(age/1000)}s, v√°lido: ${isValid}`);
    return isValid;
  }

  /**
   * Convertir grados a radianes
   */
  private degreesToRadians(degrees: number): number {
    return degrees * (Math.PI / 180);
  }

  /**
   * Manejo centralizado de errores de geolocalizaci√≥n
   */
  private handleGeolocationError(error: any): GeolocationError {
    let userMessage = 'Error obteniendo ubicaci√≥n';
    let code = error.code || 0;

    if (error.code) {
      // Error est√°ndar de geolocalizaci√≥n
      switch (error.code) {
        case 1: // PERMISSION_DENIED
          userMessage = 'Permisos de ubicaci√≥n denegados. Por favor, permite el acceso a tu ubicaci√≥n.';
          break;
        case 2: // POSITION_UNAVAILABLE
          userMessage = 'Ubicaci√≥n no disponible. Verifica que tengas GPS o conexi√≥n a internet.';
          break;
        case 3: // TIMEOUT
          userMessage = 'Tiempo de espera agotado obteniendo ubicaci√≥n. Int√©ntalo de nuevo.';
          break;
        default:
          userMessage = 'Error desconocido obteniendo ubicaci√≥n.';
      }
    } else if (error.name === 'TimeoutError') {
      // Error de timeout de RxJS
      code = 3;
      userMessage = 'Tiempo de espera agotado obteniendo ubicaci√≥n. Int√©ntalo de nuevo.';
    } else {
      // Otros errores
      userMessage = 'Error interno obteniendo ubicaci√≥n.';
    }

    return this.createError(code, error.message || 'Unknown error', userMessage);
  }

  /**
   * Crear objeto de error estandardizado
   */
  private createError(code: number, message: string, userMessage: string): GeolocationError {
    return {
      code,
      message,
      userMessage
    };
  }
}
